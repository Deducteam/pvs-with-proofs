(divides_lems
 (divides_rew 0
  (divides_rew-1 nil 3408099183
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((divides const-decl "bool" divides nil)) shostak))
 (divides_lt 0
  (divides_lt-2 nil 3319537116
   ("" (skosimp*)
    (("" (expand "divides")
      (("" (skosimp*)
        (("" (replace -1)
          (("" (hide -1)
            (("" (case "x!1 = 0")
              (("1" (assert) nil nil)
               ("2" (expand "abs")
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (lemma "both_sides_times_pos_lt1")
                      (("1" (inst -1 "mm!1" "x!1" "0")
                        (("1" (assert)
                          (("1" (case "mm!1 > 0")
                            (("1" (assert)
                              (("1"
                                (case "-x!1 >= 1")
                                (("1"
                                  (lemma "both_sides_times_pos_le1")
                                  (("1"
                                    (inst -1 "mm!1" "x!1" "-1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "both_sides_times_pos_le1")
                      (("2" (inst -1 "mm!1" "x!1" "0")
                        (("2" (assert)
                          (("2" (lemma "both_sides_times_pos_ge1")
                            (("2" (inst -1 "mm!1" "x!1" "1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((divides const-decl "bool" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   nil)
  (divides_lt-1 nil 3319478734
   ("" (skosimp*)
    (("" (expand "divides")
      (("" (skosimp*)
        (("" (replace -1)
          (("" (hide -1)
            (("" (case "x!1 = 0")
              (("1" (assert) nil nil)
               ("2" (expand "abs")
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (lemma "both_sides_times_pos_lt1")
                      (("1" (inst -1 "mm!1" "x!1" "0")
                        (("1" (assert)
                          (("1" (case "mm!1 > 0")
                            (("1" (assert)
                              (("1"
                                (case "-x!1 >= 1")
                                (("1"
                                  (lemma "both_sides_times_pos_le1")
                                  (("1"
                                    (inst -1 "mm!1" "x!1" "-1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "both_sides_times_pos_le1")
                      (("2" (inst -1 "mm!1" "x!1" "0")
                        (("2" (assert)
                          (("2" (lemma "both_sides_times_pos_ge1")
                            (("2" (inst -1 "mm!1" "x!1" "1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (divides_lt_abs 0
  (divides_lt_abs-4 nil 3407856540
   ("" (skosimp*)
    (("" (expand "abs" + 1)
      (("" (lift-if)
        (("" (ground)
          (("1" (rewrite "divides_lt")
            (("1" (hide 2)
              (("1" (expand "divides")
                (("1" (skosimp*)
                  (("1" (inst 1 "-x!1") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "divides_lt") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (divides const-decl "bool" divides nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (divides_lt formula-decl nil divides_lems nil))
   nil)
  (divides_lt_abs-3 nil 3319537141
   ("" (skosimp*)
    (("" (expand "abs" + 1)
      (("" (lift-if)
        (("" (ground)
          (("1" (rewrite "divides_lt")
            (("1" (hide 2)
              (("1" (expand "divides")
                (("1" (skosimp*)
                  (("1" (inst 1 "-k!1") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "divides_lt") nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (divides_lt_abs-2 nil 3319478815
   ("" (skosimp*)
    (("" (expand "abs" + 1)
      (("" (lift-if)
        (("" (ground)
          (("1" (rewrite "divides_lt")
            (("1" (hide 2)
              (("1" (expand "divides")
                (("1" (skosimp*)
                  (("1" (inst 1 "-x!1") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "divides_lt") nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (divides_lt_abs-1 nil 3319478734
   ("" (skosimp*)
    (("" (expand "abs" + 1)
      (("" (lift-if)
        (("" (ground)
          (("1" (rewrite "divides_lt")
            (("1" (hide 2)
              (("1" (expand "divides")
                (("1" (skosimp*)
                  (("1" (inst 1 "-k!1") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "divides_lt") nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (divides_mod 0
  (divides_mod-1 nil 3319478734
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (divides const-decl "bool" divides nil)
    (nil application-judgement "below(m)" mod nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil))
   nil))
 (divides_sym 0
  (divides_sym-4 nil 3407856566
   ("" (skosimp*)
    (("" (iff)
      (("" (expand "divides")
        (("" (prop)
          (("1" (skosimp*)
            (("1" (inst + "-x!1") (("1" (assert) nil nil)) nil)) nil)
           ("2" (skosimp*)
            (("2" (inst + "-x!1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (divides const-decl "bool" divides nil))
   nil)
  (divides_sym-3 nil 3319537170
   ("" (skosimp*)
    (("" (iff)
      (("" (expand "divides")
        (("" (prop)
          (("1" (skosimp*)
            (("1" (inst + "-k!1") (("1" (assert) nil nil)) nil)) nil)
           ("2" (skosimp*)
            (("2" (inst + "-k!1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (divides_sym-2 nil 3319478864
   ("" (skosimp*)
    (("" (iff)
      (("" (expand "divides")
        (("" (prop)
          (("1" (skosimp*)
            (("1" (inst + "-x!1") (("1" (assert) nil nil)) nil)) nil)
           ("2" (skosimp*)
            (("2" (inst + "-x!1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (divides_sym-1 nil 3319478734
   ("" (skosimp*)
    (("" (iff)
      (("" (expand "divides")
        (("" (prop)
          (("1" (skosimp*)
            (("1" (inst + "-k!1") (("1" (assert) nil nil)) nil)) nil)
           ("2" (skosimp*)
            (("2" (inst + "-k!1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (divides_plus 0
  (divides_plus-1 nil 3407859420
   ("" (skosimp*)
    (("" (expand "divides")
      (("" (skosimp*)
        (("" (replace -1)
          (("" (hide -1)
            (("" (inst + "x!1+x!2") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((divides const-decl "bool" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (divides_plus_1 0
  (divides_plus_1-2 nil 3407856605
   ("" (skosimp*)
    (("" (expand "divides")
      (("" (skosimp*)
        (("" (replace -2)
          (("" (hide -2)
            (("" (case "1/mm!1 + x!1 = x!2")
              (("1" (hide -3)
                (("1" (typepred "mm!1")
                  (("1" (lemma "floor_int")
                    (("1" (inst -1 "x!2")
                      (("1" (replace -3 :dir rl)
                        (("1" (lemma "floor_plus_int")
                          (("1" (inst?)
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "floor_small")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (expand "abs")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (lift-if)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "both_sides_div1")
                (("2" (inst -1 "mm!1" "1 + mm!1 * x!1" "mm!1 * x!2")
                  (("2" (flatten)
                    (("2" (hide -1)
                      (("2" (split -1)
                        (("1" (assert) nil nil) ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((divides const-decl "bool" divides nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (floor_small formula-decl nil floor_ceil nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (floor_int formula-decl nil floor_ceil nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (both_sides_div1 formula-decl nil real_props nil))
   nil)
  (divides_plus_1-1 nil 3319478734
   ("" (skosimp*)
    (("" (expand "divides")
      (("" (skosimp*)
        (("" (replace -2)
          (("" (hide -2)
            (("" (case "1/mm!1 + k!1 = k!2")
              (("1" (hide -3)
                (("1" (typepred "mm!1")
                  (("1" (lemma "floor_int")
                    (("1" (inst -1 "k!2")
                      (("1" (replace -3 :dir rl)
                        (("1" (lemma "floor_plus_int")
                          (("1" (inst?)
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "floor_small")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (expand "abs")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (hide -1 -2 -3 2)
                                                (("1"
                                                  (lemma "pos_div_ge")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "both_sides_div1")
                (("2" (inst -1 "mm!1" "1 + mm!1 * k!1" "mm!1 * k!2")
                  (("2" (flatten)
                    (("2" (hide -1)
                      (("2" (split -1)
                        (("1" (assert) nil nil) ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (lcm_TCC1 0
  (lcm_TCC1-1 nil 3319478734
   ("" (skosimp*)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (expand "member")
          (("" (inst - "m1!1*m2!1") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (divides const-decl "bool" divides nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (empty? const-decl "bool" sets nil))
   nil))
 (gcd_noem 0
  (gcd_noem-1 nil 3319478734
   ("" (skosimp*)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (expand "member")
          (("" (inst -1 "1") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (divides const-decl "bool" divides nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil))
   nil))
 (gcd_prep 0
  (gcd_prep-2 nil 3407856627
   ("" (skosimp*)
    (("" (typepred "j!1")
      (("" (split)
        (("1" (inst + "abs(j!1)")
          (("1" (skosimp*)
            (("1" (typepred "y!1")
              (("1" (expand "divides")
                (("1" (skosimp*)
                  (("1" (replace -3)
                    (("1" (rewrite "abs_mult")
                      (("1" (case "x!2 = 0")
                        (("1" (assert) nil nil)
                         ("2" (hide -2 -3 2)
                          (("2" (grind)
                            (("1" (lemma "both_sides_times_pos_le1")
                              (("1"
                                (inst -1 "y!1" "1" "-x!2")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (lemma "both_sides_times_pos_le1")
                              (("2"
                                (inst -1 "y!1" "1" "x!2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (case "j!1 = 0")
          (("1" (inst + "abs(i!1)")
            (("1" (skosimp*)
              (("1" (typepred "y!1")
                (("1" (expand "divides")
                  (("1" (skosimp*)
                    (("1" (hide -3 -4)
                      (("1" (replace -2)
                        (("1" (hide -2)
                          (("1" (rewrite "abs_mult")
                            (("1" (case "x!1 = 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (case
                                   "abs(y!1) <= abs(y!1) * abs(x!1)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (lemma "both_sides_times_pos_le1")
                                    (("2"
                                      (inst
                                       -1
                                       "abs(y!1)"
                                       "1"
                                       "abs(x!1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide -1 2 4)
                                          (("2"
                                            (case
                                             "(FORALL (n: posnat): abs(n) >= 1)")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (induct "n")
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (expand "abs")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (inst + "abs(i!1)*abs(j!1)")
            (("1" (skosimp*)
              (("1" (typepred "y!1")
                (("1" (expand "divides")
                  (("1" (skosimp*)
                    (("1" (case "abs(y!1) <= abs(i!1) * abs(j!1)")
                      (("1" (assert) nil nil)
                       ("2"
                        (case "(EXISTS (NN: posnat): abs(i!1)*abs(j!1) = NN*abs(y!1))")
                        (("1" (skosimp*)
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1"
                                (lemma "both_sides_times_pos_le1")
                                (("1"
                                  (inst -1 "abs(y!1)" "1" "NN!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide 2 5)
                            (("2" (replace -2)
                              (("2"
                                (hide -2)
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (rewrite "abs_mult")
                                      (("2"
                                        (rewrite "abs_mult")
                                        (("2"
                                          (inst
                                           1
                                           "abs(x!1) * (abs(y!1) * abs(x!2))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (case "x!1 = 0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (case "x!2 = 0")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 4 5)
                                                (("2"
                                                  (lemma
                                                   "pos_times_gt")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 4)
                                                        (("2"
                                                          (grind)
                                                          (("1"
                                                            (mult-by
                                                             -2
                                                             "-x!2")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (mult-by
                                                             -1
                                                             "x!2")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "pos_times_gt")
              (("2" (inst?)
                (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "int" divides_lems nil)
    (y!1 skolem-const-decl
     "({k: posnat | divides(k, i!1) AND divides(k, j!1)})" divides_lems
     nil)
    (x!2 skolem-const-decl "int" divides_lems nil)
    (pos_times_gt formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (j!1 skolem-const-decl "{jj: int | i!1 = 0 => jj /= 0}"
     divides_lems nil)
    (i!1 skolem-const-decl "int" divides_lems nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (divides const-decl "bool" divides nil)
    (abs_mult formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil))
   nil)
  (gcd_prep-1 nil 3319478734
   ("" (skosimp*)
    (("" (typepred "j!1")
      (("" (split)
        (("1" (inst + "abs(j!1)")
          (("1" (skosimp*)
            (("1" (typepred "y!1")
              (("1" (expand "divides")
                (("1" (skosimp*)
                  (("1" (replace -3)
                    (("1" (rewrite "abs_mult")
                      (("1" (case "k!2 = 0")
                        (("1" (assert) nil nil)
                         ("2" (hide -2 -3 2)
                          (("2" (grind)
                            (("1" (lemma "both_sides_times_pos_le1")
                              (("1"
                                (inst -1 "y!1" "1" "-k!2")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (lemma "both_sides_times_pos_le1")
                              (("2"
                                (inst -1 "y!1" "1" "k!2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (case "j!1 = 0")
          (("1" (inst + "abs(i!1)")
            (("1" (skosimp*)
              (("1" (typepred "y!1")
                (("1" (expand "divides")
                  (("1" (skosimp*)
                    (("1" (hide -3 -4)
                      (("1" (replace -2)
                        (("1" (hide -2)
                          (("1" (rewrite "abs_mult")
                            (("1" (case "k!1 = 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (case
                                   "abs(y!1) <= abs(y!1) * abs(k!1)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (lemma "both_sides_times_pos_le1")
                                    (("2"
                                      (inst
                                       -1
                                       "abs(y!1)"
                                       "1"
                                       "abs(k!1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide -1 2 4)
                                          (("2"
                                            (case
                                             "(FORALL (n: posnat): abs(n) >= 1)")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (induct "n")
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (expand "abs")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (inst + "abs(i!1)*abs(j!1)")
            (("1" (skosimp*)
              (("1" (typepred "y!1")
                (("1" (expand "divides")
                  (("1" (skosimp*)
                    (("1" (case "abs(y!1) <= abs(i!1) * abs(j!1)")
                      (("1" (assert) nil nil)
                       ("2"
                        (case "(EXISTS (NN: posnat): abs(i!1)*abs(j!1) = NN*abs(y!1))")
                        (("1" (skosimp*)
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1"
                                (lemma "both_sides_times_pos_le1")
                                (("1"
                                  (inst -1 "abs(y!1)" "1" "NN!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide 2 5)
                            (("2" (replace -2)
                              (("2"
                                (hide -2)
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (rewrite "abs_mult")
                                      (("2"
                                        (rewrite "abs_mult")
                                        (("2"
                                          (inst
                                           1
                                           "abs(k!1) * (abs(y!1) * abs(k!2))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (case "k!1 = 0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (case "k!2 = 0")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 4 5)
                                                (("2"
                                                  (lemma
                                                   "pos_times_gt")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 4)
                                                        (("2"
                                                          (grind)
                                                          (("1"
                                                            (mult-by
                                                             -2
                                                             "-k!2")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (mult-by
                                                             -1
                                                             "k!2")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "pos_times_gt")
              (("2" (inst?)
                (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)))

