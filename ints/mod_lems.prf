(mod_lems
 (mod_0 0
  (mod_0-1 nil 3408102350 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (mod_1_TCC1 0
  (mod_1_TCC1-1 nil 3408117267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (mod_1 0
  (mod_1-1 nil 3408117091
   ("" (skosimp*)
    (("" (expand "mod")
      (("" (lemma "floor_small")
        (("" (inst?)
          (("" (assert)
            (("" (split -1)
              (("1" (lift-if)
                (("1" (case "1/j!1 >= 0")
                  (("1" (assert) nil nil)
                   ("2" (hide -1 2)
                    (("2" (cross-mult 1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (floor_small formula-decl nil floor_ceil nil))
   shostak))
 (mod_by1 0
  (mod_by1-1 nil 3408117615
   ("" (skosimp*) (("" (expand "mod") (("" (assert) nil nil)) nil))
    nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (mod_to_rem 0
  (mod_to_rem-1 nil 3407854800
   ("" (skosimp*)
    (("" (expand "mod")
      (("" (lemma "rem_def2")
        (("" (inst?)
          (("" (inst -1 "i!1 - m!1 * floor(i!1 / m!1)")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (expand "divides") (("1" (inst?) nil nil)) nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "floor(i!1 / m!1)")
                (("2" (lemma "mod_pos")
                  (("2" (expand "mod") (("2" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mod_pos formula-decl nil mod nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (divides const-decl "bool" divides nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!1 skolem-const-decl "int" mod_lems nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m!1 skolem-const-decl "posnat" mod_lems nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rem_def2 formula-decl nil modulo_arithmetic nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil))
   shostak))
 (mod_0_divides 0
  (mod_0_divides-1 nil 3407854929
   ("" (skosimp*)
    (("" (expand "mod")
      (("" (expand "divides")
        (("" (prop)
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (skosimp*) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (divides const-decl "bool" divides nil))
   shostak))
 (mod_wrap_around 0
  (mod_wrap_around-1 nil 3407847912
   ("" (skosimp*)
    (("" (expand "mod")
      (("" (lemma "floor_val")
        (("" (inst?) (("" (inst -1 "1") (("" (ground) nil))))))))))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (floor_val formula-decl nil floor_ceil nil))
   nil))
 (mod_wrap2 0
  (mod_wrap2-1 nil 3407847912
   ("" (skosimp*)
    (("" (expand "mod")
      (("" (case "(m!1 + c!1) / m!1 = 1 + c!1/m!1")
        (("1" (lemma "floor_plus_int")
          (("1" (inst -1 "1" "c!1/m!1")
            (("1" (lemma "floor_small")
              (("1" (inst?)
                (("1" (expand "abs") (("1" (assert) nil)))))))))))
         ("2" (assert) nil))))))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (floor_small formula-decl nil floor_ceil nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (mod_inj1 0
  (mod_inj1-1 nil 3407847912
   ("" (skosimp*)
    (("" (expand "mod")
      (("" (lemma "floor_val")
        ((""
          (case "floor((x!1 + n!1) / m!1) = 0 OR floor((x!1 + n!1) / m!1) = 1")
          (("1"
            (case "floor((x!1 + c!1) / m!1) = 0 OR floor((x!1 + c!1) / m!1) = 1")
            (("1" (ground) nil)
             ("2" (case "x!1 + c!1 < m!1")
              (("1" (flatten) (("1" (inst?) (("1" (assert) nil)))))
               ("2" (flatten)
                (("2" (inst -2 "x!1+c!1" "m!1" "1")
                  (("2" (assert) nil)))))))))
           ("2" (case "x!1 + n!1 < m!1")
            (("1" (inst?) (("1" (flatten) (("1" (assert) nil)))))
             ("2" (flatten)
              (("2" (inst -1 "x!1+n!1" "m!1" "1")
                (("2" (assert) nil))))))))))))))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (floor_val formula-decl nil floor_ceil nil))
   nil))
 (mod_inj2 0
  (mod_inj2-1 nil 3407847912
   ("" (skosimp*)
    (("" (expand "mod")
      (("" (rewrite "floor_small")
        (("1" (rewrite "floor_small")
          (("1" (tcc-bdd) nil) ("2" (tcc-bdd) nil)))
         ("2" (tcc-bdd) nil))))))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (floor_small formula-decl nil floor_ceil nil))
   nil))
 (mod_wrap_inj 0
  (mod_wrap_inj-1 nil 3407847912
   ("" (skosimp*)
    (("" (iff 1)
      (("" (split 1)
        (("1" (flatten)
          (("1" (case "abs(x!1-b!1) < abs(m!1)")
            (("1" (lemma "mod_lt")
              (("1" (inst -1 "x!1-b!1" "m!1")
                (("1" (assert)
                  (("1" (lemma "mod_lt")
                    (("1" (inst -1 "x!1+a!1" "m!1")
                      (("1" (lemma "mod_wrap_around")
                        (("1" (inst?)
                          (("1" (expand "sgn")
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "abs")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (ground)
                                      nil)))))))))))))))))))))))))
             ("2" (hide -1 2)
              (("2" (expand "abs")
                (("2" (lift-if) (("2" (ground) nil)))))))))))
         ("2" (flatten)
          (("2" (case-replace "a!1 = m!1-b!1")
            (("1" (lemma "mod_sum")
              (("1" (inst -1 "x!1-b!1" "m!1" "1")
                (("1" (assert) nil)))))
             ("2" (assert) nil))))))))))
    nil)
   ((mod_sum formula-decl nil mod nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod_lt formula-decl nil mod nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "below(m)" mod nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sgn const-decl "int" real_defs nil)
    (mod_wrap_around formula-decl nil mod_lems nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil))
 (mod_neg_limited 0
  (mod_neg_limited-1 nil 3407847912
   ("" (skosimp*)
    (("" (lemma "mod_lt")
      (("" (inst?)
        (("" (expand "abs")
          (("" (assert)
            (("" (expand "sgn") (("" (propax) nil))))))))))))
    nil)
   ((mod_lt formula-decl nil mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (mod_int_quot 0
  (mod_int_quot-1 nil 3618743609
   ("" (skeep)
    (("" (split)
      (("1" (expand "mod") (("1" (grind) nil nil)) nil)
       ("2" (cross-mult)
        (("2" (expand "mod") (("2" (cancel-by 1 "n") nil nil)) nil))
        nil))
      nil))
    nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "below(m)" mod nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil))
 (floor_div_prod 0
  (floor_div_prod-2 nil 3618743898
   ("" (skeep)
    (("" (lemma "floor_div")
      (("" (inst - "floor(floor(i/m)/n)" "n*m" "i")
        (("" (assert)
          (("" (hide 2)
            (("" (split)
              (("1" (typepred "floor(floor(i/m)/n)")
                (("1" (cross-mult -1)
                  (("1" (mult-by -1 "m")
                    (("1" (typepred "floor(i/m)")
                      (("1" (cross-mult -1) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "floor(floor(i/m)/n)")
                (("2" (hide -1)
                  (("2" (cross-mult -1)
                    (("2" (mult-by -1 "m")
                      (("2" (assert)
                        (("2" (case "m>i")
                          (("1" (case "n>=1")
                            (("1" (mult-by -1 "m")
                              (("1" (assert) nil nil)) nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (lemma "floor_div")
                            (("2" (inst - "floor(i/m)" "m" "i")
                              (("2"
                                (assert)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "floor_div")
                                    (("2"
                                      (inst
                                       -
                                       "floor(floor(i/m)/n)"
                                       "n"
                                       "floor(i/m)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "n>i")
                                          (("1"
                                            (case "m>=1")
                                            (("1"
                                              (mult-by -1 "n")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "EXISTS (q:posnat,r:nat,aa:real): 0<aa AND aa<1 AND r<n AND i/m = q*n + r + aa")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "floor(i/m) = q*n + r")
                                                    (("1"
                                                      (case
                                                       "floor(floor(i/m)/n) = q")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (case
                                                           "i/m < n + q*n")
                                                          (("1"
                                                            (mult-by
                                                             -1
                                                             "m")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -6
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "floor_div")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -4 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (name
                                                 "aa"
                                                 "i/m - floor(i/m)")
                                                (("2"
                                                  (case "aa = 0")
                                                  (("1"
                                                    (case
                                                     "EXISTS (J:nat): i = m*J")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (case
                                                           "m*J/m = J")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "NOT aa < 1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "EXISTS (q: nat, r: nat, aa: real):
                                                                 0 < aa AND aa < 1 AND r < n AND i / m = aa + r + q * n")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "q = 0")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "i/m < n")
                                                                  (("1"
                                                                    (cross-mult
                                                                     -1)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "floor(i/m) = n")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "floor_div")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               +
                                                               "q"
                                                               "r"
                                                               "aa!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 3)
                                                          (("2"
                                                            (inst
                                                             +
                                                             "floor(floor(i/m)/n)"
                                                             "mod(floor(i/m),n)"
                                                             "aa")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "aa"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "mod"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((floor_div formula-decl nil floor_ceil nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (q skolem-const-decl "nat" mod_lems nil)
    (nil application-judgement "below(m)" mod nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (aa skolem-const-decl "rat" mod_lems nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   nil)
  (floor_div_prod-1 nil 3618743857
   ("" (skeep)
    (("" (lemma "floor_div")
      (("" (inst - "floor(floor(i/K2)/K1)" "K1*K2" "i")
        (("" (assert)
          (("" (hide 2)
            (("" (split)
              (("1" (typepred "floor(floor(i/K2)/K1)")
                (("1" (cross-mult -1)
                  (("1" (mult-by -1 "K2")
                    (("1" (typepred "floor(i/K2)")
                      (("1" (cross-mult -1)
                        (("1" (assert) nil)))))))))))
               ("2" (typepred "floor(floor(i/K2)/K1)")
                (("2" (hide -1)
                  (("2" (cross-mult -1)
                    (("2" (mult-by -1 "K2")
                      (("2" (assert)
                        (("2" (case "K2>i")
                          (("1" (case "K1>=1")
                            (("1" (mult-by -1 "K2")
                              (("1" (assert) nil)))
                             ("2" (assert) nil)))
                           ("2" (lemma "floor_div")
                            (("2" (inst - "floor(i/K2)" "K2" "i")
                              (("2"
                                (assert)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "floor_div")
                                    (("2"
                                      (inst
                                       -
                                       "floor(floor(i/K2)/K1)"
                                       "K1"
                                       "floor(i/K2)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "K1>i")
                                          (("1"
                                            (case "K2>=1")
                                            (("1"
                                              (mult-by -1 "K1")
                                              (("1" (assert) nil)))
                                             ("2" (assert) nil)))
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "EXISTS (q:posnat,r:nat,aa:real): 0<aa AND aa<1 AND r<K1 AND i/K2 = q*K1 + r + aa")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "floor(i/K2) = q*K1 + r")
                                                    (("1"
                                                      (case
                                                       "floor(floor(i/K2)/K1) = q")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (case
                                                           "i/K2 < K1 + q*K1")
                                                          (("1"
                                                            (mult-by
                                                             -1
                                                             "K2")
                                                            (("1"
                                                              (assert)
                                                              nil)))
                                                           ("2"
                                                            (replace
                                                             -6
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil)))))))
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "floor_div")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil)))))))))))
                                                     ("2"
                                                      (replace -4 1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "floor_div")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "q*K1+r"
                                                             "1"
                                                             "q*K1+aa+r")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))
                                               ("2"
                                                (name
                                                 "aa"
                                                 "i/K2 - floor(i/K2)")
                                                (("2"
                                                  (case "aa = 0")
                                                  (("1"
                                                    (case
                                                     "EXISTS (J:nat): i = K2*J")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (case
                                                           "K2*J/K2 = J")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil)))
                                                           ("2"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (assert)
                                                      nil)))
                                                   ("2"
                                                    (case "NOT aa < 1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "floor(i/K2)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (both-sides
                                                             -
                                                             "floor(i/K2)"
                                                             -2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -4)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))))))))))
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "EXISTS (q: nat, r: nat, aa: real):
                           0 < aa AND aa < 1 AND r < K1 AND i / K2 = aa + r + q * K1")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "q = 0")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "i/K2 < K1")
                                                                  (("1"
                                                                    (cross-mult
                                                                     -1)
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "floor(i/K2) = K1")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "floor(K1/K1) = 1")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (typepred
                                                                                 "floor(i/K2)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -5
                                                                                   -2)
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     -2)
                                                                                    (("1"
                                                                                      (case
                                                                                       "K1>=1")
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -1
                                                                                         "K2")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil)))))))))))))
                                                                           ("2"
                                                                            (lemma
                                                                             "floor_int")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "1")
                                                                              (("2"
                                                                                (assert)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (lemma
                                                                       "floor_div")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (div-by
                                                                             1
                                                                             "K2")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "NOT (K2 + K1*K2)/K2 = 1 + K1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -5
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))))))))))))
                                                             ("2"
                                                              (inst
                                                               +
                                                               "q"
                                                               "r"
                                                               "aa!1")
                                                              (("1"
                                                                (assert)
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil)))))))
                                                         ("2"
                                                          (hide 3)
                                                          (("2"
                                                            (inst
                                                             +
                                                             "floor((i/K2)/K1)"
                                                             "mod(aa,K1)"
                                                             "aa")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT aa>=0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (typepred
                                                                     "floor(i/K2)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (postpone)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (postpone)
                                                                  nil)))))
                                                             ("2"
                                                              (postpone)
                                                              nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (mod_mult_quot_TCC1 0
  (mod_mult_quot_TCC1-1 nil 3618744333 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   nil))
 (mod_mult_quot 0
  (mod_mult_quot-1 nil 3618744334
   ("" (skeep)
    (("" (expand "mod")
      (("" (rewrite "floor_div_prod") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (floor_div_prod formula-decl nil mod_lems nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak)))

