(max_finite_set_nat
 (maxrec_TCC1 0
  (maxrec_TCC1-1 nil 3623407390
   ("" (skeep) (("" (rewrite "card_rest") (("" (assert) nil nil)) nil))
    nil)
   ((card_rest formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_rest application-judgement "finite_set[nat]"
     max_finite_set_nat nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (max_TCC1 0
  (max_TCC1-2 nil 3623407705
   ("" (inst + "LAMBDA S: maxrec(S)")
    (("" (induct "S" + "finite_set_induction_rest")
      (("1" (typepred "S!1") (("1" (propax) nil nil)) nil)
       ("2" (typepred "S!1") (("2" (propax) nil nil)) nil)
       ("3" (auto-rewrite-theory "sets[nat]") (("3" (assert) nil nil))
        nil)
       ("4" (skosimp)
        (("4" (expand "maxrec" +)
          (("4" (split +)
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (flatten)
                (("2" (expand "fsmax")
                  (("2" (split +)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1"
                            (name-replace "MAX"
                             "maxrec(sets.rest(SS!1))")
                            (("1" (lemma "rest_member[nat]")
                              (("1"
                                (expand "member")
                                (("1"
                                  (inst - "SS!1" "MAX")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (lift-if)
                (("3" (split +)
                  (("1" (hide -2)
                    (("1" (flatten)
                      (("1" (case-replace "x!1 = choose(SS!1)")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (hide 2)
                            (("2" (lemma "choose_rest_or[nat]")
                              (("2"
                                (expand "member")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand* "empty?" "member")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (expand "fsmax")
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (prop)
                                (("1"
                                  (lemma "choose_rest_or[nat]")
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (inst - "x!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst - "SS!1" "x!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst - "x!1")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide -2 -3 3 4)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (lemma "choose_rest_or[nat]")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (finite_set_induction_rest formula-decl nil finite_sets_inductions
     "finite_sets/")
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set[nat]"
     max_finite_set_nat nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_rest application-judgement "finite_set[nat]"
     max_finite_set_nat nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (fsmax const-decl "nat" max_finite_set_nat nil)
    (rest_member formula-decl nil sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rest const-decl "set" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (maxrec def-decl "nat" max_finite_set_nat nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (max_TCC1-1 nil 3507028515
   (""
    (inst +
     "(LAMBDA (S: {A: (nonempty?[posnat]) | EXISTS x: FORALL (y: (A)): y <= x}): max_rec(S,bnd(S)))")
    (("1" (skosimp*)
      (("1" (typepred "bnd(S!1)")
        (("1" (inst - "choose[posnat](S!1)")
          (("1" (lemma "max_rec_in")
            (("1" (inst?)
              (("1" (inst -1 "bnd(S!1) - choose(S!1)")
                (("1" (assert)
                  (("1" (skosimp*)
                    (("1" (lemma "max_rec_bnd")
                      (("1" (inst?)
                        (("1" (inst - "bnd(S!1) - x!1")
                          (("1" (assert)
                            (("1" (typepred "bnd(S!1)")
                              (("1"
                                (inst - "x!1")
                                (("1" (assert) nil)))))))
                           ("2" (typepred "bnd(S!1)")
                            (("2" (inst - "x!1")
                              (("2" (assert) nil)))))))))))))))
                 ("2" (assert) nil)))))))))))))
     ("2" (skosimp*)
      (("2" (typepred "bnd(S!1)")
        (("2" (inst - "choose(S!1)") (("2" (assert) nil))))))))
    nil)
   nil nil))
 (max_def 0
  (max_def-1 nil 3507028515
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "maximum?")
        (("1" (assert)
          (("1" (skosimp*)
            (("1" (typepred "max(S!1)")
              (("1" (replace -3)
                (("1" (inst - "x!1") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "maximum?")
        (("2" (flatten)
          (("2" (typepred "max(S!1)")
            (("2" (inst -2 "a!1")
              (("2" (assert)
                (("2" (inst - "max(S!1)") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{a: nat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}"
         max_finite_set_nat nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (maximum? const-decl "bool" max_finite_set_nat nil))
   nil))
 (max_lem 0
  (max_lem-1 nil 3507028515
   ("" (skosimp*)
    (("" (lemma "max_def") (("" (inst?) (("" (assert) nil)))))) nil)
   ((max_def formula-decl nil max_finite_set_nat nil)
    (max const-decl
         "{a: nat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}"
         max_finite_set_nat nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (max_in 0
  (max_in-1 nil 3507028515 ("" (skosimp*) (("" (assert) nil)) nil) nil
   nil)))

