(defparameter escape nil)

(defun print-dk-id (oc id)
  (setq escape nil)
  (loop for char across (format nil "~A" id)
	do
	(cond ((alpha-char-p char)
	       (format oc "~C" char))
	      ((and (digit-char-p char) escape)
	       (format oc "0")
	       (format oc "~C" char)
	       (setq escape nil))
	      ((and (digit-char-p char) (not escape))
	       (format oc "~C" char))
	      ((equal char #\_)
	       (setq escape t)
	       (format oc "_"))
	      (t
	       (format oc "_")
	       (format oc "~D" (char-int char))
	       (format oc "_")))))
  ;; (format oc "~A" id))

(defmethod print-dk-term (oc term)
  (declare (ignore oc))
  (show term)
  (format t "~%bug found : ~a~%" term)
  (assert (and 'print-dk-trm nil))
  )
(defgeneric print-dk-term (oc (term dk-term)))
(defmethod print-dk-term (oc (term dk-lam))
  (format oc "(")
  (print-dk-term oc (var term))
  (format oc ":")
  (print-dk-term oc (type term))
  (format oc "=>~%")
  (print-dk-term oc (body term))
  (format oc ")")
  )
(defmethod print-dk-term (oc (term dk-pi))
  (format oc "(")
  (print-dk-term oc (var term))
  (format oc ":")
  (print-dk-term oc (type term))
  (format oc "->")
  (print-dk-term oc (body term))
  (format oc ")")
  )
(defmethod print-dk-term (oc (term dk-arrow))
  (format oc "(")
  (print-dk-term oc (domain term))
  (format oc "->")
  (print-dk-term oc (range term))
  (format oc ")")
)
(defmethod print-dk-term (oc (term dk-logic-var))
  (format oc "logic.~a" (format nil "~a" (id term))))
(defmethod print-dk-term (oc (term dk-module-var))
  (format oc "~a.~a" (format nil "~a" (module term)) (format nil "~a" (id term))))
(defmethod print-dk-term (oc (term dk-var))
  (print-dk-id oc (id term)))
(defmethod print-dk-term (oc (term dk-const))
  (cond 
   ((eq term dk-prop-type) (format oc "(logic.term logic.boolean)"))
   ((eq term dk-type-type) (format oc "logic.type"))
   ((eq term dk-app-term) (format oc "logic.apply"))
   ((eq term dk-lam-term) (format oc "logic.lambda"))
   ((eq term dk-imply) (format oc "logic.imply_constructive"))
   ((eq term dk-prf) (format oc "logic.prf"))
   ((eq term dk-type-term) (format oc "logic.term"))))

(defmethod print-dk-term (oc (term dk-app))
  (cond ((null (args term))
	 (print-dk-term oc (fun term)))
	(t
	 (format oc "(")
	 (print-dk-term oc (fun term))
	 (dolist (arg (args term))
	   (format oc " ")
	   (print-dk-term oc arg))
	 (format oc ")"))))

(defgeneric print-dk-line (oc (line dk-line)))
(defmethod print-dk-line (oc (line dk-prelude))
  (format oc "#NAME ")
  (print-dk-id oc (name line))
  (format oc ".~%"))
(defmethod print-dk-line (oc (line dk-decl))
  (print-dk-id oc (id line))
  (format oc " : ")
  (print-dk-term oc (type line))
  (format oc ".~%"))
(defmethod print-dk-line (oc (line dk-def))
  (format oc "def ")
  (print-dk-id oc (id line))
  (format oc " : ")
  (print-dk-term oc (type line))
  (format oc " := ")
  (print-dk-term oc (body line))
  (format oc ".~%"))
(defmethod print-dk-line (oc line)
  (declare (ignore oc line))
  nil)


(defmethod output-dk (stream (decl formula-decl) (trace trace))
  (declare (ignore stream))
  nil)

(defmethod output-dk (stream (decl formula-decl) (proof proof))
  (print-dk-line stream (mk-dk-proof-line decl proof)))
